# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['UREG', 'WEIGHT_UNIT', 'Quantity', 'Unit', 'unit', 'with_unit', 'to_dimensions', 'SplitQuantity', 'split',
           'to', 'ton', 'pound']

# Cell
from typing import Dict, NamedTuple

import pint

# Cell
# default system of units used throughout the application
UREG = pint.UnitRegistry(system="US")

# default unit of weight used for reporting weights
WEIGHT_UNIT = UREG.pound

Quantity = pint.Quantity
Unit = pint.Unit

# Cell
def unit(sunit: str) -> Unit:
    """Convert the string value to a unit."""
    return UREG(sunit)

# Cell
def with_unit(value: float, sunit: str) -> Quantity:
    """Attach the given unit to the value."""
    return value * unit(sunit)

# Cell
def to_dimensions(unit: Unit) -> Dict[str, int]:
    """Return the dimensions of the unit."""
    return dict(unit.dimensionality)

# Cell
class SplitQuantity(NamedTuple):
    """A quantity as a dimensionless number and unit description."""

    magnitude: float
    sunit: str

# Cell
def split(quantity: Quantity) -> SplitQuantity:
    """Split the number into its magnitude and unit."""
    return SplitQuantity(magnitude=quantity.magnitude, sunit=str(quantity.units))

# Cell
def to(quantity: Quantity, sunit: str) -> Quantity:
    """Convert the quantity to the given units."""
    return quantity.to(unit(sunit))

# Cell
def ton(value: float) -> Quantity:
    """Cast the value as a weight in tons."""
    return with_unit(value=value, sunit="ton")

# Cell
def pound(value: float) -> Quantity:
    """Cast the value as a weight in pounds."""
    return with_unit(value=value, sunit="pound")